---
title: "Activity 12: Confidence Intervals"
author: "YOUR NAME"
date: "YYYY-MM-DD"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
set.seed(1)
```


# Getting Started

1. Download the `.Rmd` and `.csv` files from Moodle and save them someplace on your computer where you can easily find again (the two files need to be in the same folder together). I strongly recommend that you save these files in a folder dedicated to activities for this class, not in your Downloads.

2. Double check that the file you downloaded is called `activity12.Rmd`, not `activity12.Rmd.txt`.

3. Open the R Markdown file in RStudio: `File > Open File... >`. (If you're working on the Mac RStudio server, you need to upload the file first: go to the `Files` panel, then click `Upload`. Upload both the Rmd and the csv file.)

4. Update the author and date in the YAML header of this file.

5. Click the `Knit` button. If successful, you should have a new window pop up with a nice looking HTML document.

**Ask for help** if you encounter issues on any of the steps above. Once you've successfully made it through these steps, you can continue. 



# Part 1: Loading Packages and Data

## Load Packages

As always, we start by loading all the packages that we'll need. 

```{r load-packages, message = F}
library(readr)
library(dplyr)
library(ggplot2)
library(broom)
# For bootstrapping
library(mosaic)
# For reading data from Google Sheet
library(gsheet)
```



## Data Context

In this activity, we'll continue looking at data on rental bike usage in Washington DC. We have information on daily rental bike usage for two years (731 days). Available variables include:  

- `date`: date in format YYYY-MM-DD
- `season`: winter, spring, summer, fall
- `year`: 2011 or 2012
- `month`: 3-letter month abbreviation
- `day_of_week`: 3-letter abbreviation for day of week
- `weekend`: TRUE if the case is a weekend, FALSE otherwise
- `holiday`: is the day a holiday? (yes or no)
- `temp_actual`: temperature in degrees Fahrenheit
- `temp_feel`: what the temperature *feels* like in degrees Fahrenheit
- `humidity`: proportion from 0 to 1 giving the humidity level
- `windspeed`: wind speed in miles per hour
- `weather_cat`: `categ1` = clear to partly cloudy, `categ2` = mist plus some clouds, `categ3` = light precipitation to thunderstorms
- `riders_casual`: count of daily rides by casual (non-registered) users
- `riders_registered`: count of daily rides by registered users
- `riders_total`: count of total daily rides (`riders_casual + riders_registered`)



## Load Data

Download `bikeshare.csv` from Moodle (if you haven't already) and make sure it's saved in the same folder as this .Rmd file. Enter code into the following code chunk to read in this dataset and save it as an object called `bikes.pop`.

```{r load-data, message = FALSE}
# Your code here
bikes.pop <- read_csv("bikeshare.csv")
```

Type `View(bikes.pop)` in the Console to familiarize yourself with what these data look like.



# Part 2: Sample From The Population

As we've done in previous activities, let's suppose that the two years of bike share data contained in `bikes.pop` is our population of interest. Today, you will each take a random sample of **150 days** from the two years of bike share data. Since the `sample_n` function is random, we will all end up with slightly different samples.

```{r sample-data}
bikes.sample <- bikes.pop %>%
  # Take random sample of size 150 from bikes.pop population
  sample_n(size = 150) 
```


Check that your sample dataset has 150 rows. 

```{r check-dimensions}
# Your code here
dim(bikes.sample)
```


Type `View(bikes.sample)` in the Console to look at your sample.



# Part 3: Classical Confidence Intervals

Today we will continue investigating the research question: *Is casual bike ridership lower on days that are windier?*

Fit a linear regression model to your **sample** data (`bikes.sample`), where the outcome is the number of daily rides by casual (non-registered) users (`riders_casual`) and the explanatory variable is the wind speed (`windspeed`). Save this model as an object called `mod` so we can easily access it again later.

```{r linear-regression}
# Fit linear regression model and save it as object called "mod"
mod <- with(data = bikes.sample, lm(riders_casual ~ windspeed))
```


Calculate the standard error for the `Intercept` and `windspeed` coefficients using the classical/theoretical approach.

```{r standard-error}
tidy(mod)
```


Using the estimates and standard errors that you got above, construct 95% confidence intervals for the `Intercept` and `windspeed` coefficients. 

```{r confint-by-hand}
## Lower bound = estimate - 2 * standard error
## Upper bound = estimate + 2 * standard error
# Your code here
```


Now, use the `confint` function to get 95% confidence intervals for the `Intercept` and `windspeed` coefficients instead of calculating them by hand. Read the help page for the `confint` function (type `?confint` in the Console) if you don't remember how to use this function.

```{r confint-by-confint}
# Your code here
```


**STOP AND DISCUSS.** Stop here to discuss and answer **Questions 1 - 5** with your group.


# Part 4: Bootstrap Confidence Intervals

We can also use bootstrapping to construct 95% confidence intervals for our regression coefficients.

Edit and then run the code chunk below to re-sample from your sample dataset 500 times, fit the same linear regression model, and record the coefficient estimates from each new sample.

```{r bootstrap}
# 500 bootstrap samples
boot.data <- mosaic::do(...)*( # REPLACE ... with number of bootstrap samples 
  bikes.sample %>%
    sample_frac(replace = TRUE) %>%
    with(lm(... ~ ...)) # REPLACE ... with variable names to fit your linear regression model from above
)

# Look at bootstrap estimates
head(boot.data) 
```


Then complete the code below to get a 95% bootstrap percentile confidence interval for the windspeed slope coefficient.

```{r bootstrap-SE}
# REPLACE the ...'s below with the appropriate number between 0 and 1
boot.data %>%
  summarize(lb = quantile(windspeed, ...), ub = quantile(windspeed, ...))
```

**STOP AND DISCUSS.** Stop here to discuss and answer **Question 6** with your group.




# Part 5: Confidence Interval Coverage

Let's compare the confidence intervals that everyone got based on their different samples. First, run the code chunk below to read in everyone's results and clean up the data. (If this data cleaning process interests you, consider taking STAT 112: Introduction to Data Science!)

```{r read-and-clean}
# Read in results from Google form responses
results <- gsheet2tbl('https://docs.google.com/spreadsheets/d/1Knz54Kz3IWOzeZ6CAGGjvyn--tThIMolmGyLpW0orUs/edit?usp=sharing')

# Look at results
head(results)

# Give columns shorter names
names(results) <- c('Timestamp', 'LB_Int', 'UB_Int', 'LB_Slope', 'UB_Slope')
head(results)

# Swap endpoints in case they were entered in wrong order
results <- results %>% 
  mutate(
    new_LB_Int = pmin(LB_Int, UB_Int),
    new_UB_Int = pmax(LB_Int, UB_Int),
    new_LB_Slope = pmin(LB_Slope, UB_Slope),
    new_UB_Slope = pmax(LB_Slope, UB_Slope)
  )

# Create variables indicating confidence interval coverage
beta <- coef(lm(riders_casual ~ windspeed, data = bikes.pop))

results <- results %>%
  # Check if population intercept beta0 is in the interval
  mutate(IntCover = if_else(beta[1] <= new_UB_Int & beta[1] >= new_LB_Int, 'Yes', 'No')) %>% 
  # Check if population slope beta1 is in the interval
  mutate(SlopeCover = if_else(beta[2] <= new_UB_Slope & beta[2] >= new_LB_Slope, 'Yes', 'No')) 
```


Then, run the code below to plot everyone's confidence intervals:

```{r visualize-intervals, fig.width = 10}
# Plot all CIs for intercept
results %>%
  ggplot(aes(x = Timestamp)) + 
  geom_segment(aes(xend = Timestamp, y = LB_Int, yend = UB_Int, color = IntCover)) +
  xlab('Data Set') + 
  ylab('Intercept \n(Avg. Riders on Days w/o Wind)') + 
  # ylim(0, 7000)+
  geom_hline(yintercept = beta[1], linetype = 2) +
  scale_color_manual('Population Parameter Covered', values = c('darkred','lightgreen'), limits = c('No','Yes')) + 
  ggtitle('CIs for intercept') + 
  theme(axis.text.x = element_text(angle = 90))

results %>%
  count(IntCover) %>%
  mutate(prop = n/sum(n))

# plot all CIs for slope
results %>%
  ggplot(aes(x = Timestamp)) + 
  geom_segment(aes(xend = Timestamp, y = LB_Slope, yend = UB_Slope, color = SlopeCover)) +
  xlab('Data Set') + 
  ylab('Windspeed Coefficient \n(Change in Avg. Riders Assoc. w/ 1 mph Incr. in Wind)') +
  #ylim(-300,100) + 
  geom_hline(yintercept = beta[2], linetype = 2) +
    scale_color_manual('Population Parameter Covered', values = c('darkred','lightgreen'), limits = c('No','Yes')) + 
  ggtitle('CIs for windspeed coefficient') + 
  theme(axis.text.x = element_text(angle = 90))

results %>%
  count(SlopeCover) %>%
  mutate(prop = n/sum(n))
```

**STOP AND DISCUSS.** Stop here to discuss and answer the **remaining questions** with your group.



