---
title: "Assignment 1"
author: "YOUR NAME HERE"
format:
    pdf:
      keep-tex: true
      include-in-header: 
         text: |
           \usepackage{fvextra}
           \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
            \DefineVerbatimEnvironment{OutputCode}{Verbatim}{breaklines,commandchars=\\\{\}}
    html: 
      self-contained: true
      grid: 
        margin-width: 200px
      callout-appearance: default
editor: visual

# You can change the color theme of the rendered document 
theme: default
---

```{r setup, include=FALSE}
# This chunk includes set-up options
# The 'include = FALSE` means that it is not shown when you
# knit
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
```

```{r include = FALSE, message = FALSE}
# Load needed libraries
library(dplyr)
library(ggplot2)
```

::: {.callout-tip collapse="true"}
# Getting Started

1.  Add your **name** to the `author` field in the YAML header.
2.  Make sure you can **render** your document. The keyboard shortcut for rendering is `Command+Shift+K` for MacOS/Linux and `Ctrl+Shift+K` for Windows. For now, I recommend **rendering to HTML**.
:::

## Configuring RStudio with Github

Here are the instructions for getting you started on using Github.

Please use the **Mount Holyoke RStudio server** (link: [rstudio.mtholyoke.edu](https://rstudio.mtholyoke.edu/){.uri}) to complete all of these tasks.

> *Why? The school server uses Linux, which means that the instructions I give (which are Linux-specific at times) will apply to all of you. If you choose to use R/RStudio on your personal laptop for connecting to Github, certain instructions will differ depending on whether your operating system is Windows or MacOS, so you will have to research what to do and/or make an appointment with me to set it up!*

If you need to access the server off-campus (i.e., when not connected to MHC WiFi), then you will need to set up a VPN (instructions: [here](https://asklits.mtholyoke.edu/TDClient/50/Portal/Requests/ServiceDet?ID=377)); come talk to Laura if you need help with this!

::: {.callout-tip collapse="true"}
# Exercise 1

**For those that missed class on Wednesday Feb. 19th:**

-   go to [github.com](https://github.com/) and create an account associated with your **Mount Holyoke email address** (if you don't have one already);

-   go through and follow the video [Portfolio Part 1: Get Started with Github](https://moodle.mtholyoke.edu/mod/kalvidres/view.php?id=1096424).

For those that **attended class on Wed. Feb. 19th** *and*

-   successfully created a `README.md` file, where

-   `README.md` is in the same location as the `.gitignore` and your `Rproj` file (mine was called `test_website.Rproj`),

you should:

-   jump to 02:28 in [Portfolio Part 2: Configure RStudio to Use Github](https://moodle.mtholyoke.edu/mod/kalvidres/view.php?id=1096438) and complete the video.

Then complete [Portfolio Part 3: Push to Github from RStudio,](https://moodle.mtholyoke.edu/mod/kalvidres/view.php?id=1096465) and be sure to read the accompanying instructions on Moodle!

To complete this exercise, your `README.md` should be pushed to Github.

-   By going to `github.com/GITHUBUSERNAME/YOURWEBSITENAME.github.io`, I should be able to see your `README.md` file rendered/displayed automatically.

> INCLUDE A LINK TO YOUR GITHUB REPOSITORY WITH YOUR RENDERED README FILE HERE. FOR EXAMPLE, MINE IS [github.com/lauralyman/lauralyman.github.io](https://github.com/lauralyman/lauralyman.github.io)

Of course, there are easier ways to upload a single `README` to Github without going through the three video tutorials. The *point* of doing the process in the videos is to configure RStudio to easily push to Github to help you easily manage your portfolio website.
:::

If at any point you run into issues, **please email me (lalyman\@mtholyoke.edu) before trying to research the problem and fix it yourself.**

> *Why? Normally I love when students self-research to problem-solve, but it is easy to put this initial set-up into a state that is difficult to debug (especially for me, since I am **not** a computer scientist who is an expert on version control, HTTPS/SSH, digital signatures via generated keys, etc.)*

## Creating Functions in R

It is often good practice to define our own functions when coding. Some reasons are to:

-   avoid having a bunch of repeated code (often the case if you find yourself copy/pasting the same commands into separate code chunks only to, say, change a few numbers);

-   improve readability (since you are organizing your logic into separate, manageable pieces);

-   make debugging easier (since you can more easily isolate where an error is happening by testing each function individually).

The general syntax for writing a function in R is:

``` markdown
your_function_name <- function(x,y,...) {
  # Code for what the function returns
}
```

where `x,y,...` are whatever inputs you would like your function to depend on.

::: {.callout-tip collapse="true"}
# Exercise 2

Finish the code in the chunk below to create a function named `check_if_in_circle`:

-   The function takes in an `x` and `y` coordinate.

-   It returns `TRUE` if (x,y) is within the unit circle (i.e., the circle of radius 1 centered at the origin), and it returns `FALSE` otherwise.

Note that writing `#| error: true` at the start of a code chunk tells our document to render even if that chunk produces an error.

```{r}
#| error: true

check_if_in_circle <- function(x,y) {
    # YOUR CODE HERE
}

```
:::

To verify that the `check_if_in_circle` function is working correctly, run the following:

```{r}
# Should return TRUE
check_if_in_circle(0, 0.99)
# Should return TRUE
check_if_in_circle(-0.5, 0.5)
# Should return FALSE
check_if_in_circle(1.1, 0.5)
# Should return FALSE
check_if_in_circle(0.6, -0.85)

```

**Without doing anything different, we can notice that your code (by default!) also works when the inputs are (equally sized) *lists*** $(x_1, \ldots, x_n)$ and $(y_1, \ldots, y_n)$ of `x` and `y` coordinates.

If given lists of coordinates, `check_if_in_circle` will return a list of *booleans* (i.e., `TRUE`/`FALSE` values), where the $i$th boolean is `TRUE` if $(x_i, y_i)$ is in the unit circle and `FALSE` otherwise.

```{r}
# List of x coordinates
x_vec = c(0, -0.5, 1.1, 0.6) 
# List of y coordinates
y_vec = c(0.99, 0.5, 0.5, -0.85)

# Should return the list TRUE, TRUE, FALSE, FALSE, since
# (0,0.99) and (-0.5, 0.5) are in the unit circle (as you just verified),
# while (1.1, 0.5) and (0.6, -0.85) are not in the unit circle (as you
# also just verified)
check_if_in_circle(x_vec, y_vec)
```

::: {.callout-tip collapse="true"}
# Exercise 3

Complete the function `return_color` , which:

-   takes two lists `x_vec` = $(x_1, \ldots, x_n)$ and `y_vec` = $(y_1, \ldots, y_n)$ of `x` and `y` coordinates;

-   returns a *list* of the same length as `x_vec` and `y_vec` where each entry is either the string "blue" or the string "red"; namely, the $i$th entry is "blue" if $(x_i, y_i)$ is in the unit circle and is "red" otherwise.

```{r}
return_color <- function(x_vec, y_vec) {
  # YOUR CODE HERE
}
```

```{r}
# Should return "blue", "blue", "red", "red"
return_color(x_vec, y_vec)
```
:::

## MC Simulation: Estimating the Area of a Region

### Vocabulary

> Every time you generate random numbers (according to some probability model/distribution), this is called *sampling* *from the distribution*.

For example,

-   when we run `rnorm(1, mean = 0, sd = 1)` we are *sampling once from the standard normal distribution*; i.e., sampling values from $X \sim \mathcal{N}(0,1)$;
-   when we run `runif(n, a, b)` we are sampling $n$ *times uniformly at random* from the interval $(a,b)$; i.e., sampling values of $X \sim U(a,b)$; this means that $X$ is equally likely to equal any value on the continuum between $a$ and $b$.

::: {.callout-tip collapse="true"}
# Exercise 4

Fill in the code below to sample points within the box $[-1, 1] \times [-1, 1]$ uniformly at random. **Hint.** Look at your `NotesDay3.qmd` file (which you submitted on Moodle under *Intro to Quarto Lab*).

```{r}
#| error: true

# To make this code reproducible (same random number generated each time)
set.seed(111)
# Number of times to sample a point from the [-1,1] x [-1, 1] box
num_points = 10000

# Sample x and y from the range [-1,1] uniformly at random
# 100000 times

x <- # YOUR CODE HERE
y <- # YOUR CODE HERE
  
# The cbind() function takes two lists (of equal length) and puts them
# into a table, where each list is a column of that table. The c stands
# for "column" 
generated_data <- data.frame(cbind(x, y))

```
:::

Now, when applied to a list of *booleans* (i.e., `TRUE`/`FALSE` values), the `sum` function will add up the number of `TRUE` values in the list. We can try this out below:

```{r}
list_of_booleans = c(TRUE, FALSE, FALSE, TRUE, FALSE)
sum(list_of_booleans)
```

::: {.callout-tip collapse="true"}
# Exercise 5

Fill in the code below to estimate the value of $\pi$ according to this MC simulation using:

-   the `sum` function

-   your `check_if_in_circle` function

-   `x`, `y`, and `num_points` from two code chunks above

-   the fact that the circle area = $\pi\cdot r^2$ = $\pi$ for the unit circle.

**Please try to figure this out without using external resources; otherwise, it ruins your chance to problem-solve!** I am happy to help guide you -- just ask!

```{r}
#| error: true

num_pts_inside = # YOUR CODE HERE

pi_estimate = # YOUR CODE HERE

```
:::

If successful, we can use our function `return_color` from before to visualize the process of marking whether points are included/excluded from the unit circle while displaying the corresponding `pi_estimate`. **You should not need to modify the code in the chunk below.**

```{r}
#| error: true

# Plot the points
ggplot(data = generated_data, 
       mapping = aes(x, y, col = return_color(x, y))) + 
geom_point() + 
ggtitle(paste("Estimated value of pi:", pi_estimate)) +
theme(legend.position="none")

```

::: {.callout-tip collapse="true"}
# Exercise 6

Estimate $\pi$ based instead on the upper right quarter of the unit circle rather than the whole circle. That is, sample uniformly at random in the box $[0,1] \times [0,1]$ and consider when points land in the corresponding *quarter* of the unit circle centered at $(0,0)$.

**Hints.**

-   Instead of `check_if_in_circle`, you will need a similar function that checks for whether input points fall in the upper right quadrant of the unit circle.

-   You will need to change how the `runif` function is called to select `x` and `y`.

-   Your final calculation of `pi_estimate` might change slightly. (Do you still multiply by 4? Why?)

```{r}
set.seed(123)
# Number of times to sample a point from the [0,1] x [0,1] box
num_points = 10000

# YOUR CODE HERE
```

After completing your code, include a visualization (like the one from the previous exercise) that displays how your algorithm is sampling and the $\pi$ estimate corresponding to that sampling.

```{r}
# CODE FOR VISUALAIZATION HERE 
```
:::
